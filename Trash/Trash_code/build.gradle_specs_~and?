/**
 Copyright 2012 Bertrand Florat
 Executable specifications build script 
 **/
import org.apache.tools.ant.filters.ReplaceTokens

defaultTasks('buildSpecs');

dependencies() {
	//main
	compile('org.concordion:concordion:1.4.2');
	compile('com.google.inject:guice:3.0');
	compile(project(':org.m2ling.service'));
	//tests
	testCompile('org.concordion:concordion:1.4.2');
	testCompile('com.google.inject:guice:3.0');
	testCompile(project(':org.m2ling.service'));
}

File concordionOutputDir = file("${buildDir}/concordion-results");


sourceSets{
	test{
		// We need to override the default src/test/resources maven directory here because
		// concordion seems to forces html and fixtures classes being in the same directory.
		java(){ srcDir 'src/specs/java' }
		resources(){ srcDir 'src/specs/java' }
	}
}

test {
	systemProperties('concordion.output.dir': concordionOutputDir);
}

task buildSpecs(dependsOn:['clean', 'test'])<<{
	copy{
		description 'Copy static HTML along with fixtures generated HTML files...'
		from 'src/specs/java'
		into concordionOutputDir
		include '**/*_static.html'
		include '**/index.html','*.css'
	}
}

Map internalDefinitionsAcronymMap = [:]
Map internalDefinitionsNotesMap = [:]


task loadGlossary<<{
	def glossary = new XmlParser().parse('glossary/m2ling.m2ling_glossary')
	glossary.contents.each {
		String name = it.attribute("name")
		String internalDefinition = it.attribute("internal_definition")
		internalDefinitionsAcronymMap.put(name,"<acronym title='"+internalDefinition+"'>"+name+"</acronym>" )
		internalDefinitionsNotesMap.put(name,"<p class='commentary'><b>"+name+"</b><br/>"+internalDefinition+"</p>" )
	}
}

/*
 * Replace all glossary entries.
 * 
 * Note that the substitution is case sensitive, by convention all glossary entries must begin by an uppcase :
 * Examples : Parameter, ParameterDefinition
 * 
 * ~entry~ to a href link. 
 * ?entry? to a note
 */
task replaceInternalDefinition(dependsOn:['buildSpecs', 'loadGlossary'])<<{
	// Acronyms
	replaceDefinition(internalDefinitionsAcronymMap,'~');
	// Notes
	replaceDefinition(internalDefinitionsAcronymMap,'?');
}

private void replaceDefinition(Map map,char token){
	copy {
		from concordionOutputDir
		into "${concordionOutputDir}_tmp"
		include '**/*.html'
		filter(ReplaceTokens, beginToken:token,endToken:token, tokens:map)
	}
	// Gradle don't seem to support the in-place substitution, so we have to make
	// all this boilerplate moves :
	delete concordionOutputDir
	copy{
		from "${concordionOutputDir}_tmp"
		into concordionOutputDir
	}
	delete "${concordionOutputDir}_tmp"
}
