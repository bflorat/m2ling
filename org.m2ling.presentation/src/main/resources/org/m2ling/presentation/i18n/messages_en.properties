# Copyright 2012 Bertrand Florat 
# List of English labels, current reference


#Main frame
mf.search=Search
mf.comments=Comments

#General strings
gal.1=Description
gal.2=Edit
gal.3=Delete
gal.4=Tags
gal.5=OK
gal.6=Cancel
gal.7=Status
gal.8=Priority
gal.9=Rationale
gal.10=Move mouse over for details
gal.11=Comments
gal.12=Name
gal.13=History
gal.14=Available
gal.15=Selected

#confirmations
confirm.1=Please Confirm:
confirm.2=Are you really sure you want to delete this item ?

#Client-side IHM errors labels
error.0=An unexpected technical error occurred, please contact the administrator or check the server logs.
error.1=Operation failed
error.3=Can't create icon image for view point
error.4=File too large
error.5=Value is mandatory
error.5=Integer required

# Technical errors labels
tcode.UNKWNOWN=Unknown error
tcode.NOT_YET_IMPLEMENTED=Not yet implemented
tcode.TRANSACTION_FAILED=Transaction failed

# Functional errors labels
fcode.TARGET_NOT_FOUND=Element not found
fcode.SIZE_EXCEEDED=String too long
fcode.DUPLICATES=The element already exists
fcode.NULL_ARGUMENT=Provided argument is null or void
fcode.ILLEGAL_ARGUMENT=Illegal argument
fcode.DUPLICATE_STATUS_LITERAL=Literal contains duplicates
fcode.DUPLICATE_NAME=An element already exists with the same name
fcode.TAGS_NOT_SUPPORTED=Targeted item doesn't support tags
fcode.TAGS_SEPARATOR=A tag can't contain the separator value
fcode.INVALID_STATUS=Status is not found among the list of view point valid status
fcode.INVALID_REFERENCE_TYPE=Reference type is not supported
fcode.STATUS_USED=Status can't be dropped because at least one rule, component or link uses it
fcode.VP_IN_USE=The view point can't be dropped because it is referenced by a view
fcode.BOUND_TYPE_BOUND=The bound type is itself bounded. Cascading binding not supported.
fcode.INVALID_TYPE=The enumeration contains items whose type is different from bound type.
fcode.LOCAL_BINDING=the viewpoint can't be bound to a type of the same viewpoint.
fcode.WRONG_IF=Wrong instantiation factor. Must be an integer >= 0 or "*" for unbounded factor.
fcode.NULL_BOUND_TYPE_ENUMERATION=Bound type is null and an enumeration of components has been provided.
fcode.INVALID_FORMAT=Wrong format.
fcode.CT_EXISTING_BINDING=The component type can't be dropped because there is at least a single component type bound to it.
fcode.VOID_ARGUMENT=Void argument
fcode.CT_INSUFFISENT_IF=The instantiation factor is too low given existing instances of components of this component type.
fcode.CT_REFERENCE_IN_USE=Cannot drop a reference, it is currently used by some components.
fcode.CT_CANNOT_CHANGE_BINDING=Cannot change or drop an existing component type binding, please drop the component type and recreate it.
fcode.NONE_TARGET=The reference contains none target
fcode.LT_EXISTING_LINK=The link type can't be dropped or changed because there is at least a single link of this type.
fcode.NONE_SOURCES_TYPES=None sources types defined
fcode.NONE_DEST_TYPES=None destination types defined
fcode.LT_ILLEGAL_ACCESS_TYPE=Unknown access type
fcode.LT_ILLEGAL_TEMPORALITY=Unknown temporality
fcode.COMP_ILLEGAL_REFERENCE=Illegal reference, at least one reference doesn't follow definition provided by its component type. 
fcode.COMP_REF_IN_USE=A component reference can't be dropped because it is referenced by an instance. 
fcode.COMP_EXISTING_INSTANCE=The component can't be dropped because there is at least one existing instance for this component.
fcode.COMP_ILLEGAL_BINDING=The component binding doesn't follow the binding defined in its associated component type
fcode.COMP_EXISTING_BINDING=Cannot delete the component because at least one component is bound to it.
fcode.MISSING_BINDING=Missing binding.
fcode.LINK_IN_USE=The link can't be dropped because there are still at least one link instance associated it.
fcode.LINK_ILLEGAL_SOURCE_OR_DEST=At least one provided source or destination component doesn't follow types defined in the associate link type.
fcode.LI_ILLEGAL_SOURCE_OR_DEST=The provided source or destination component instance is inconsistent with component sources and destination defined in the associated link.
fcode.CI_EXISTING_BINDING=Cannot delete the component instance because at least one component instance is bound to it.
fcode.CI_ILLEGAL_BINDING=The component instance binding doesn't follow the binding defined in its associated component type
fcode.CI_ILLEGAL_REFERENCE=Illegal reference, at least one reference doesn't follow definition provided by its component. 

#Principles
pr.1=None rule yet defined for this view point
pr.2=Create a new view point
pr.3=Features
pr.5=Name of the view point like 'Physical Architecture'
pr.6=Additional information describing the view point
pr.7=Any comment about the view point, can be used a as reminder.<br/>Example : 'Work in progress, some component types missing'. Basic HTML tags usage allowed.
pr.8=Comma-separated strings used to group related items together and ease searches.<br/>Example : 'physical;team A;2012'
pr.9=Comma-separated ordered strings defining available status for this view point items.<br/>Example : 'READY,RETIRED,FULL,AVAILABLE'
pr.10=New View Point
pr.11=Upload an icon
pr.13=Rules
pr.14=Component types
pr.15=Link types
pr.16=Create a new rule
pr.17=Rule #
pr.18=Create a new rule
pr.19=Set rule settings
pr.20=Select the status of the item among status literals defined in the associated viewpoint.
pr.21=Select the priority of the rule relatively to others.
pr.22=Trace of fundamental reasons for the rule. Basic HTML tags allowed.
pr.23=Exceptions
pr.24=List of cases where an exemption can be applied or where the rule doesn't apply. Basic HTML tags usage allowed.
pr.25=Activities
pr.26=Name of the rule like '4
pr.27=Content of the rule like 'A component of type 1 can't call a component of type 2'. Basic HTML tags usage allowed.
pr.28=Status history
pr.29=Add a new component type
pr.30=I.Factor
pr.32=Restricted components
pr.33=References
pr.34=Create a new component type
pr.35=None component type yet defined for this view point
pr.36=Bound type
pr.37=Instantiation factor
pr.38=Create a new component type
pr.39=Choose a list of component or groups
pr.40=Type
pr.41=Select one or more targets
pr.42=Select a type
pr.43=Create a new link type
pr.44=None link type yet defined for this view point
pr.45=Temporality
pr.46=Access type
pr.47=Sources types
pr.48=Destinations types
pr.49=Create a new link type
pr.50=Link type temporality set the behavior of the links from a time point of view (synchronous, asynchronous...). See help at the top of the dialog for more details.
pr.51=Link type access type set the access behavior of the links (read, write...). See help at the top of the dialog for more details.
pr.52=Select one or more sources types
pr.53=Select one or more destinations types

#Online Help
help.1=<b>The idea</b><p>A component type is a concept of your projects (like "Application" or "Server"). M2studio knows about them and components you'll create there will be of these type and should follow the definitions you provided (like possible relations between component types).</p><b>Instantiation Factor</b><p>The I.Factor is used to specify if components of given a component type can be instantiated as a node and if so, to restrict the number of possible nodes ('*' means 'unbounded'). For example, instantiation doesn't make sense for applicative architecture if you only want to display logical applications and links between them (then I.Factor should be set to zero) while it may be useful, if you want to model some running instances of the application on a cluster (I.Factor could then be '*' or '5' for instance).</p><b>References</b><p>The references enforce possible relations between component types of the same viewpoint (example : "Application server" DEPENDS_ON "Database").</p><b>Bound type and restricted components</b><p>You can optionally bind a component type to a single other component type from another viewpoint. It is useful if you rely upon a concept but you don't manage it. For instance, let's say that you define a "Server" component type in your logical architecture view point but you don't manage the servers models, it's the Operations team role and the models are defined under a "X86Server" component type in the "Physical architecture" view point managed by the Operations team. If "Server" component type is bound to "X86Server" one, the components you can select in m2studio would be restricted by the list of components defined in Physical Architectures views. Moreover, you can restrict further the valid components from your own component type using the "Restricted components" option that can contain either a list of one or more components (like "IBM_X86_HS21, IBM_X86_HS22") or a list of one or more component groups (like "IBM_X86_Servers"). If a CT is bound to another, it get the bound type name, comment and description by default (they though can be overridden) and both CT tags are merged.</p><b>Status</b><p>A component type can have a status, for instance, it may be useful to set a type of component as INVALID (the "INVALID" status have to be created explicitly by you in the viewpoint declaration) so every component of this type have a special treatment (components drawn in red in m2studio for instance).</p><b>Tags</b>Tags are comma-separated strings used to simply annotate an item (like "Team_A", "TODO" or "march").</p>     
help.2=<b>The idea</b><p>A link type is a concept of your projects (like "REST_HTTP", "DATABASE_NET", "Ethernet6E"). M2studio knows about them and the links you'll create between components will own one of these types and should follow the definitions you provided. Links you'll be able to declare between components will be restricted by the sources and destinations component types you declared here. For instance, if a "DATABASE_NET" link has been declared between "Application" component type and "Database" component type, source components in m2studio of a new "billing_access" link (type "DATABASE_NET")  will have to be of "Application" type (example : the "billing_application" component) and destination component will have to be a "Database" component (example : "billing_database" component). It is possible to declare several component types sources or destinations. The same component type can be used for both source and destination types.</p><b>Temporality</b><p>A link type temporality can be :<ul><li>"SYNC" if synchronous</li><li>"ASYNC_PULL" if asynchronous with caller making periodic pull request to get the result</li><li>"ASYNC_PUSH" if the result is pushed from the callee back to the caller once done</li></ul></p></p><b>Access type</b><p>A link type access type can be :<ul><li>"CREATE" for CREATE only link types</li><li>"READ" for reading only link types</li><li>"UPDATE" for UPDATE only link types</li><li>"DELETE" for deletion only link types</li><li>"RW" for Read and/or write (update, create or delete) link type</li><li>"RO" is equivalent to "READ" and only exists for consistency purpose with "RW"</li><li>"SEARCH" is "READ" biaised towards multiple returned value and a search key as call argument</li><li>"SEARCH_INDEX_OUTPUT" is similar to "SEARCH" but there, the result is not actually returned but the search result only contains matching items index or IDs allowing the caller to retrieve the full detail later</li><li>"EVENT" represents a publication-subscription event call type. The associated temporality of such a link type is usually ASYNC_PULL but may be different in some architectures.</li></ul></p><b>Status</b><p>A link type can have a status, for instance, it may be useful to set a type of link as INVALID (the "INVALID" status have to be created explicitly by you in the viewpoint declaration) so every link of this type have a special treatment (links drawn in red in m2studio for instance).</p><b>Tags</b>Tags are comma-separated strings used to simply annotate an item (like "Team_A", "TODO" or "march").</p>     
help.3=<b>The idea</b><p>A viewpoint groups together concepts, rules and workflows dealing with an aspect of an enterprise information system. Example : the applicative architects viewpoint deals mostly with applications and modules whether the operational architects viewpoint deals with infrastructure concepts. Once a viewpoint defined in m2principles, it is possible to create views in m2studio that conform with exactly one viewpoint.</p><b>Status Literals</b>These comma-separated string literals are used as possible status by all viewpoint items (component and link types, rules and activities). Example : "VALIDATED,STUDIED,REFUSED,OBSOLETE".<b>Tags</b>Tags are comma-separated strings used to simply annotate an item (like "Team_A", "TODO" or "march").</p>
help.4=<b>The idea</b><p>A rule is a documented architectural decision, for example "Direct call between GUI modules are forbidden". It contains : <ul><li>a mandatory description</li><li>a mandatory rationale to explain the goal of this rule (example : "This makes centralized access control possible")</li><li>an optional exceptions (exemptions) list of cases where the case doesn't apply</li><li>a status among status defined in the associated viewpoint status literals</li><li>a priority integer field you can use to set a priority (the priority order is up to you)</li></ul><p>Tags are comma-separated strings used to simply annotate an item (like "Team_A", "TODO" or "march").</p>