# Copyright 2012 Bertrand Florat 
# List of English labels, current reference


#Main frame
mf.search=Search
mf.comments=Comments

#General strings
gal.1=Description
gal.2=Edit
gal.3=Delete
gal.4=Tags
gal.5=OK
gal.6=Cancel
gal.7=Status
gal.8=Priority
gal.9=Rationale
gal.10=Move mouse over for details
gal.11=Comments
gal.12=Name
gal.13=History
gal.14=Available
gal.15=Selected

#confirmations
confirm.1=Please Confirm:
confirm.2=Are you really sure you want to delete this item ?

#Client-side IHM errors labels
error.1=Operation failed
error.3=Can't create icon image for view point
error.4=File too large
error.5=Value is mandatory
error.5=Integer required

# Technical errors labels
tcode.UNKWNOWN=Unknown error
tcode.NOT_YET_IMPLEMENTED=Not yet implemented
tcode.TRANSACTION_FAILED=Transaction failed

# Functional errors labels
fcode.TARGET_NOT_FOUND=Element not found
fcode.SIZE_EXCEEDED=String too long
fcode.DUPLICATES=The element already exists
fcode.NULL_ARGUMENT=Provided argument is null or void
fcode.ILLEGAL_ARGUMENT=Illegal argument
fcode.DUPLICATE_STATUS_LITERAL=Literal contains duplicates
fcode.DUPLICATE_NAME=An element already exists with the same name
fcode.TAGS_NOT_SUPPORTED=Targeted item doesn't support tags
fcode.TAGS_SEPARATOR=A tag can't contain the separator value
fcode.INVALID_STATUS=Status is not found among the list of view point valid status
fcode.INVALID_REFERENCE_TYPE=Reference type is not supported
fcode.STATUS_USED=Status can't be dropped because at least one rule, component or link uses it
fcode.VP_IN_USE=The view point can't be dropped because it is referenced by a view
fcode.BOUND_TYPE_BOUND=The bound type is itself bounded. Cascading binding not supported.
fcode.INVALID_TYPE=The enumeration contains items whose type is different from bound type.
fcode.LOCAL_BINDING=the viewpoint can't be bound to a type of the same viewpoint.
fcode.DELTA_BINDING_IF=The instantiation factor flag should have the same value that the bound type.
fcode.WRONG_IF=Wrong instantiation factor. Must be an integer >= 0 or "*" for unbounded factor.
fcode.NULL_BOUND_TYPE_ENUMERATION=Bound type is null and an enumeration of components has been provided.
fcode.INVALID_FORMAT=Wrong format.
fcode,CT_EXISTING_COMP=The component type can't be dropped or changed because there is at least a single component of this type.
fcode,CT_EXISTING_BINDING=The component type can't be dropped or changed because there is at least a single component type bound to it.
fcode.VOID_ARGUMENT=Void argument
fcode.CT_INSUFFISENT_IF=The instantiation factor is too low given existing instances of components of this component type.
fcode.CT_REFERENCE_IN_USE=Cannot drop a reference, it is currently used by some components.

#Principles
pr.1=None rule yet defined for this view point
pr.2=Create a new view point
pr.3=Features
pr.5=Name of the view point like 'Physical Architecture'
pr.6=Additional information describing the view point
pr.7=Any comment about the view point, can be used a as reminder.<br/>Example : 'Work in progress, some component types missing'. Basic HTML tags usage allowed.
pr.8=Comma-separated strings used to group related items together and ease searches.<br/>Example : 'physical;team A;2012'
pr.9=Comma-separated ordered strings defining available status for this view point items.<br/>Example : 'READY,RETIRED,FULL,AVAILABLE'
pr.10=New View Point
pr.11=Upload an icon for this view point
pr.12=Upload icon
pr.13=Rules
pr.14=Component types
pr.15=Link types
pr.16=Create a new rule
pr.17=Rule #
pr.18=Create a new rule
pr.19=Set rule settings
pr.20=Select the status of the item among status literals defined in the associated viewpoint.
pr.21=Select the priority of the rule relatively to others.
pr.22=Trace of fundamental reasons for the rule. Basic HTML tags allowed.
pr.23=Exceptions
pr.24=List of cases where an exemption can be applied or where the rule doesn't apply. Basic HTML tags usage allowed.
pr.25=Activities
pr.26=Name of the rule like '4
pr.27=Content of the rule like 'A component of type 1 can't call a component of type 2'. Basic HTML tags usage allowed.
pr.28=Status history
pr.29=Add a new component type
pr.30=I.Factor
pr.32=Restricted components
pr.33=References
pr.34=Create a new component type
pr.35=None component type yet defined for this view point
pr.36=Bound type
pr.37=Instantiation factor
pr.38=Create a new component type
pr.39=Choose a list of component or groups
pr.40=Type
pr.41=Select one or more targets
pr.42=Select a type


#Online Help
help.1=<b>The idea</b><p>A component type is a concept of your projects (like "Application" or "Server"). M2studio knows about them and components you'll create there will be of one of these type and should follow the definitions you provided (like possible relations between component types).</p><b>Instantiation Factor</b><p>The I.Factor is used to specify if components of given a component type can be instantiated as a node and if so, to restrict the number of possible nodes ('*' means 'unbounded'). For example, instantiation doesn't make sense for applicative architecture if you only want to display logical applications and links between them (then I.Factor should be set to zero) while it may be useful, if you want to model some running instances of the application on a cluster (I.Factor could then be '*' or '5' for instance).</p><b>References</b><p>The references enforce possible relations between component types of the same viewpoint (example : "Application server" DEPENDS_ON "Database").</p><b>Bound type and restricted components</b><p>You can optionally bind a component type to a single other component type from another viewpoint. It is useful if you rely upon a concept but you don't manage it. For instance, let's say that you define a "Server" component type in your logical architecture view point but you don't manage the servers models, it's the Operations team role and the models are defined under a "X86Server" component type in the "Physical architecture" view point managed by the Operations team. If "Server" component type is bound to "X86Server" one, the components you can select in m2studio would be restricted by the list of components defined in Physical Architectures views. Moreover, you can restrict further the valid components from your own component type using the "Restricted components" option that can contain either a list of components or a list components groups (like "IBM_X86_Servers").</p>     